@import 'theme/default.css';

body {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: max-content auto max-content;
  grid-template-areas: 'header' 'main' 'footer';
  margin: 0;
  padding: 0;
  height: 100vh;
  color: var(--text-color);
  font-size: var(--default-font-size);
  line-height: var(--default-line-height);
  background-color: var(--background-color);
  user-select: none;

  /* if message is displayed */
  &[data-message] {
    &::before {
      position: absolute;
      text-align: center;
      top: 50%;
      width: 100%;
      color: var(--attr-name-color);
      content: attr(data-message);
    }

    #meta {
      display: none;
    }
  }
}

mark {
  color: var(--mark-color);
  background-color: var(--mark-background-color);
}

a {
  text-decoration: inherit;
  color: inherit;
}

header {
  grid-area: header;
  z-index: 100; /* make shadow visible */
}

main {
  grid-area: main;
  overflow: auto;
  scrollbar-color: var(--scrollbar-thumb-color) var(--scrollbar-track-color);
}

footer {
  grid-area: footer;
  z-index: 100; /* make shadow visible */
}

#filters {
  --input-padding: 2px;
  --input-height: 24px;
  --filter-icon-size: 16px;
  --clear-button-size: calc(var(--input-height) - var(--input-padding) * 2);

  display: flex;
  align-items: center;
  padding: 4px 5px;
  background-color: var(--filter-background-color);
  box-sizing: border-box;
  /* border-bottom: 1px solid var(--status-border-color); */
  filter: drop-shadow(0 0 5px var(--filter-shadow-color));

  .search {
    position: relative;
    margin-right: 2px;
    padding-right: 5px;
    width: calc(15% - 5px);
    min-width: 248px;

    .searchIcon {
      position: absolute;
      left: var(--input-padding);
      top: calc(var(--input-height) / 2 - var(--filter-icon-size) / 2);
      width: var(--filter-icon-size);
      height: var(--filter-icon-size);
      fill: var(--control-color);
    }

    input[type='text'] {
      padding: var(--input-padding) calc(var(--clear-button-size) + var(--input-padding)) var(--input-padding)
        calc(var(--filter-icon-size) + var(--input-padding) * 2);
      width: 100%;
      height: var(--input-height);
      font-size: var(--default-font-size);
      line-height: 16px;
      color: inherit;
      vertical-align: middle;
      background: none;
      outline: none;
      border: none;
      border-bottom: 1px solid var(--filter-border-color);
      box-sizing: border-box;

      &:valid {
        & ~ .searchIcon {
          fill: var(--control-active-color);
        }
      }

      &:invalid {
        & ~ button[name='clearFilter'] {
          display: none;
        }
      }
    }

    button[name='clearFilter'] {
      position: absolute;
      top: var(--input-padding);
      right: var(--input-padding);
      padding: 4px; /* downscale icon */
      width: var(--clear-button-size);
      height: var(--clear-button-size);
      color: inherit;
      background: none;
      border: none;
      box-sizing: border-box;
      cursor: pointer;
      outline: none;

      svg {
        display: block;
        width: 100%;
        height: 100%;
        fill: currentColor;
      }
    }
  }

  .actions {
    position: relative;
    margin-left: auto;
    padding: 0 0 0 10px;

    &::before {
      content: '';
      position: absolute;
      top: 2px;
      left: 5px;
      bottom: 2px;
      border-left: 1px solid var(--filter-border-color);
    }
  }

  .flag {
    display: inline-flex;
    align-items: center;
    margin-left: 2px;
    padding: 0 6px;
    height: var(--input-height);
    color: var(--control-color);
    fill: var(--control-color);
    line-height: 16px;
    white-space: nowrap;
    cursor: pointer;
    box-sizing: border-box;

    input {
      display: none;

      &:not(:checked) ~ svg {
        .checked {
          fill: none;
        }
      }

      &:checked {
        & ~ svg {
          fill: var(--control-active-color);

          .unchecked {
            fill: none;
          }
        }

        & ~ span {
          color: var(--control-active-color);
        }
      }
    }

    svg {
      margin-right: 6px;
      width: 16px;
      height: 16px;
    }

    &:hover {
      svg {
        fill: var(--control-hover-color);
      }

      span {
        color: var(--control-hover-color);
      }
    }
  }

  button[name='reload'] {
    padding: 4px;
    width: 24px;
    height: 24px;
    background: none;
    border: none;
    cursor: pointer;
    outline: none;

    svg {
      height: 16px;
      width: 16px;
      vertical-align: -4px;
      fill: var(--control-color);
    }

    &:hover svg {
      fill: var(--control-hover-color);
    }

    &._animate {
      transition: transform 1s;
      transform: rotate(360deg);
    }
  }
}

#meta {
  width: 100%;

  tr {
    &.warning th {
      background-color: var(--warning-item-background-color);
    }

    &.break-value .value {
      word-break: break-all;
    }
  }

  th,
  td {
    position: relative;
    padding: 2px 10px;
    text-align: left;
    border-bottom: 1px solid transparent;
  }

  th {
    padding-right: 24px; /* space for actions */
    width: 15%;
    min-width: 220px; /* see input width */
    font-weight: var(--text-bold-weight);
    white-space: nowrap;
    word-break: keep-all;
    background-color: var(--row-head-background-color);
  }

  td {
    font-weight: normal;

    tr:nth-child(even) & {
      background-color: var(--row-even-background-color);
    }
    tr:nth-child(odd) & {
      background-color: var(--row-odd-background-color);
    }
    tr.warning & {
      background-color: var(--warning-background-color);
    }
    tr.error & {
      background-color: var(--error-background-color);
    }
  }

  th,
  td {
    tr:hover & {
      background-color: color-mix(in hsl, var(--row-head-background-color), var(--row-hover-dim-color) 3%);
    }

    tr.warning & {
      background-color: var(--warning-background-color);
    }
    tr.warning:hover & {
      background-color: color-mix(in hsl, var(--warning-background-color), var(--row-hover-dim-color) 5%);
    }
    tr.error & {
      background-color: var(--error-background-color);
    }
    tr.error:hover & {
      background-color: color-mix(in hsl, var(--error-background-color), var(--row-hover-dim-color) 5%);
    }
  }

  a {
    text-decoration: none;
    color: var(--link-color);

    &:hover {
      text-decoration: underline;
    }
  }

  .tag {
    display: inline-block;
    margin: 0 5px 0 -3px;
    padding: 0px 5px 0px;
    width: 30px;
    text-align: center;
    font-weight: normal;
    font-size: 10px;
    line-height: 15px;
    color: hsl(0, 0%, 100%);
    background-color: hsl(0, 0%, 50%);
    border-radius: 3px;
    text-transform: uppercase;

    &.-meta {
      background-color: var(--tag-meta-color);
    }

    &.-title {
      background-color: var(--tag-title-color);
    }

    &.-base {
      background-color: var(--tag-base-color);
    }

    &.-link {
      background-color: var(--tag-link-color);
    }
  }

  .key,
  .name,
  .value {
    user-select: text;
  }

  .value {
    margin-right: 1em;

    &:empty {
      display: none;
    }
  }

  .attributes {
    color: var(--attr-value-color);
    font-weight: normal;
  }

  .attribute {
    display: inline-block;
    white-space: nowrap;

    .name {
      color: var(--attr-name-color);
    }

    &:has(.value:not(:empty)) {
      .name::after {
        content: ':';
      }
    }
  }

  .actions {
    --action-icon-size: 18px;

    position: absolute;
    top: 50%;
    right: 0;
    padding: 1px;
    height: var(--action-icon-size);
    opacity: 0;
    transform: translateY(-50%);

    a {
      color: inherit;

      svg {
        margin-top: 1px;
        width: var(--action-icon-size);
        height: var(--action-icon-size);
        fill: currentColor;
        opacity: 0.2;
      }

      &:hover svg {
        opacity: 0.5;
      }
    }
  }
  tr:hover .actions {
    opacity: 1;
  }
}

#statusBar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  column-gap: 12px;
  padding: 2px 10px;
  height: 24px;
  color: var(--status-color);
  background: var(--status-background-color);
  filter: drop-shadow(0 0 5px var(--filter-shadow-color));
  /* border-top: 1px solid var(--status-border-color); */
}

#resultCount {
  min-width: 10em;
  text-align: left;
}

#charCount {
  min-width: 10em;
  text-align: right;
}

#notifications {
  margin: 0;
  padding: 0;
  list-style: none;

  svg {
    height: 16px;
    width: 16px;
    vertical-align: top;
    fill: currentColor;
  }

  .warning {
    color: var(--warning-color);
  }

  a:hover {
    .text {
      text-decoration: underline;
    }
  }
}
