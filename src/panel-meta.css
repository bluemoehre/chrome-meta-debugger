@import 'theme/default.css';

:root {
  --icon-size: 16px;
}

body {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: max-content auto max-content;
  grid-template-areas: 'header' 'main' 'footer';
  margin: 0;
  padding: 0;
  height: 100vh;
  color: var(--text-color);
  font-size: var(--default-font-size);
  line-height: var(--default-line-height);
  background-color: var(--background-color);
  user-select: none;
  overflow: hidden;

  /* if message is displayed */
  &[data-message] {
    &::before {
      position: absolute;
      text-align: center;
      top: 50%;
      width: 100%;
      color: var(--attr-name-color);
      content: attr(data-message);
    }

    #meta {
      display: none;
    }
  }
}

mark {
  color: var(--mark-color);
  background-color: var(--mark-background-color);
}

a {
  text-decoration: inherit;
  color: inherit;
}

header {
  grid-area: header;
  z-index: 100; /* make shadow visible */
}

main {
  grid-area: main;
  overflow: auto;
  scrollbar-color: var(--scrollbar-thumb-color) var(--scrollbar-track-color);
}

footer {
  grid-area: footer;
  z-index: 100; /* make shadow visible */
}

#filters {
  --input-padding: 2px;
  --input-height: 24px;
  --clear-button-size: calc(var(--input-height) - var(--input-padding) * 2);

  display: flex;
  align-items: center;
  padding: 4px 5px;
  background-color: var(--filter-background-color);
  box-sizing: border-box;
  /* border-bottom: 1px solid var(--status-border-color); */
  filter: drop-shadow(0 0 5px var(--filter-shadow-color));

  .search {
    position: relative;
    margin-right: 2px;
    padding-right: 5px;
    width: calc(15% - 5px);
    min-width: 248px;

    .searchIcon {
      position: absolute;
      left: var(--input-padding);
      top: calc(var(--input-height) / 2 - var(--icon-size) / 2);
      width: var(--icon-size);
      height: var(--icon-size);
      fill: var(--control-color);
    }

    input[type='text'] {
      padding: var(--input-padding) calc(var(--clear-button-size) + var(--input-padding)) var(--input-padding)
        calc(var(--icon-size) + var(--input-padding) * 2);
      width: 100%;
      height: var(--input-height);
      font-size: var(--default-font-size);
      line-height: var(--icon-size);
      color: inherit;
      vertical-align: middle;
      background: none;
      outline: none;
      border: none;
      border-bottom: 1px solid var(--filter-border-color);
      box-sizing: border-box;

      &:valid {
        & ~ .searchIcon {
          fill: var(--control-active-color);
        }
      }

      &:invalid {
        & ~ button[name='clearFilter'] {
          display: none;
        }
      }
    }

    button[name='clearFilter'] {
      position: absolute;
      top: var(--input-padding);
      right: var(--input-padding);
      padding: 4px; /* downscale icon */
      width: var(--clear-button-size);
      height: var(--clear-button-size);
      color: inherit;
      background: none;
      border: none;
      box-sizing: border-box;
      cursor: pointer;
      outline: none;

      svg {
        display: block;
        width: 100%;
        height: 100%;
        fill: currentColor;
      }
    }
  }

  .options {
    display: flex;
    flex: auto;
    align-items: center;
    justify-content: space-between;

    .checkboxButton {
      display: inline-flex;
      align-items: center;
      padding: 0 6px;
      height: var(--input-height);
      color: var(--control-color);
      white-space: nowrap;
      cursor: pointer;
      box-sizing: border-box;

      input {
        display: none;
      }

      svg {
        margin-right: 6px;
        width: var(--icon-size);
        height: var(--icon-size);
        fill: currentColor;

        input:checked ~ & {
          fill: var(--control-active-color);

          .unchecked {
            fill: none;
          }
        }

        input:not(:checked) ~ & {
          .checked {
            fill: none;
          }
        }
      }

      span {
        input:checked ~ & {
          color: var(--control-active-color);
        }
      }

      &:hover {
        color: var(--control-hover-color);
      }
    }

    .toggleButton {
      display: inline-flex;
      gap: 4px;
      align-items: center;
      padding: 0 6px;
      height: var(--input-height);
      color: var(--control-color);
      cursor: pointer;

      input {
        display: none;
      }

      svg {
        width: var(--icon-size);
        height: var(--icon-size);
        fill: currentColor;
      }

      &:hover {
        color: var(--control-hover-color);
      }

      &:has(input:checked) {
        color: var(--control-active-color);
      }
    }

    .actionButton {
      padding: 4px;
      height: var(--input-height);
      color: var(--control-color);
      background: none;
      border: none;
      cursor: pointer;
      outline: none;

      svg {
        width: var(--icon-size);
        height: var(--icon-size);
        fill: currentColor;
      }

      &[name='reload'] {
        &._animate {
          transition: transform 1s;
          transform: rotate(360deg);
        }
      }
    }

    .group {
      display: flex;

      &.-flags {
      }

      &.-options {
        position: relative;
        padding: 0 0 0 10px;
        margin-right: auto;

        &::before {
          content: '';
          position: absolute;
          top: 2px;
          left: 5px;
          bottom: 2px;
          border-left: 1px solid var(--filter-border-color);
        }

        @media (max-width: 650px) {
          .text {
            display: none;
          }
        }
      }

      &.-actions {
      }

      &.-settings {
        position: relative;
        padding: 0 0 0 10px;

        &::before {
          content: '';
          position: absolute;
          top: 2px;
          left: 5px;
          bottom: 2px;
          border-left: 1px solid var(--filter-border-color);
        }
      }
    }
  }
}

#meta {
  --cell-min-height: 16px;
  --cell-padding-vertical: 3px;
  --cell-padding-horizontal: 10px;
  --cell-border-vertical: 1px solid transparent;

  table-layout: fixed;
  width: 100%;

  col {
    min-width: 200px;
    max-width: 80%;
  }

  tr {
    &.warning th {
      background-color: var(--warning-item-background-color);
    }
  }

  th,
  td {
    position: relative;
    padding: var(--cell-padding-vertical) var(--cell-padding-horizontal);
    min-height: var(--cell-min-height);
    text-align: left;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  th {
    font-weight: var(--text-bold-weight);
    white-space: nowrap;
    word-break: keep-all;
    background-color: var(--row-head-background-color);
  }

  td {
    font-weight: normal;
    text-overflow: ellipsis;

    tr:nth-child(even) & {
      background-color: var(--row-even-background-color);
    }
    tr:nth-child(odd) & {
      background-color: var(--row-odd-background-color);
    }
    tr.warning & {
      background-color: var(--warning-background-color);
    }
    tr.error & {
      background-color: var(--error-background-color);
    }
  }

  th,
  td {
    tr:hover & {
      background-color: color-mix(in hsl, var(--row-head-background-color), var(--row-hover-dim-color) 3%);
    }

    tr.warning & {
      background-color: var(--warning-background-color);
    }
    tr.warning:hover & {
      background-color: color-mix(in hsl, var(--warning-background-color), var(--row-hover-dim-color) 5%);
    }
    tr.error & {
      background-color: var(--error-background-color);
    }
    tr.error:hover & {
      background-color: color-mix(in hsl, var(--error-background-color), var(--row-hover-dim-color) 5%);
    }
  }

  a {
    text-decoration: none;
    color: var(--link-color);

    &:hover {
      text-decoration: underline;
    }
  }

  .tag {
    display: inline-block;
    margin: 0 5px 0 -3px;
    padding: 0px 5px 0px;
    width: 30px;
    height: 1.5em;
    font-size: 10px;
    font-weight: normal;
    line-height: 1.5em;
    text-transform: uppercase;
    text-align: center;
    vertical-align: text-bottom;
    color: hsl(0, 0%, 100%);
    background-color: hsl(0, 0%, 50%);
    border-radius: 3px;

    &.-meta {
      background-color: var(--tag-meta-color);
    }

    &.-title {
      background-color: var(--tag-title-color);
    }

    &.-base {
      background-color: var(--tag-base-color);
    }

    &.-link {
      background-color: var(--tag-link-color);
    }
  }

  .key,
  .name,
  .value {
    user-select: text;
  }

  .value {
    margin-right: 1em;

    &:empty {
      display: none;
    }

    .break-value td > & {
      word-break: break-all;
    }
  }

  .attributes {
    color: var(--attr-value-color);
    font-weight: normal;
  }

  .attribute {
    .name {
      color: var(--attr-name-color);
    }
    &:has(.value:not(:empty)) .name::after {
      content: ':';
    }
  }

  .info {
    display: flex;
    gap: 2px;
    float: right;
    margin: 0 -2px 0 var(--cell-padding-horizontal);
    height: var(--icon-size);

    a {
      color: inherit;
    }

    svg {
      width: var(--icon-size);
      height: var(--icon-size);
      fill: currentColor;
    }

    .action {
      filter: opacity(0);

      tr:hover & {
        filter: opacity(0.5);

        &:hover {
          filter: opacity(1);
        }
      }
    }

    .error {
      color: var(--error-color);
    }

    .warning {
      color: var(--warning-color);
    }
  }
}

input[name='columnWidth-1'] {
  display: block;
  position: sticky;
  top: 0;
  left: 0;
  appearance: none;
  margin: 0;
  padding: 0;
  width: 100%;
  height: 0;
  z-index: 1;

  &:focus {
    outline: none;
  }

  &::-webkit-slider-runnable-track {
    -webkit-appearance: none;
    width: 100%;
    height: 0;
  }

  &::-webkit-slider-thumb {
    -webkit-appearance: none;
    position: relative;
    height: calc(100vh - 60px); /* subtract filter + status bar */
    width: 4px;
    background-color: transparent;
    cursor: ew-resize;

    /* debug */
    /* height: 10px;
    background-color: lightcoral; */
  }
}

#statusBar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  column-gap: 12px;
  padding: 2px 10px;
  height: 24px;
  color: var(--status-color);
  background: var(--status-background-color);
  filter: drop-shadow(0 0 5px var(--filter-shadow-color));
  /* border-top: 1px solid var(--status-border-color); */
}

#resultCount {
  min-width: 10em;
  text-align: left;
}

#charCount {
  min-width: 10em;
  text-align: right;
}

#notifications {
  --icon-size: 16px;

  flex: 1 1;
  display: flex;
  justify-content: center;
  column-gap: 10px;
  flex-wrap: nowrap;
  margin: 0;
  padding: 0;
  list-style: none;

  svg {
    height: var(--icon-size);
    width: var(--icon-size);
    vertical-align: top;
    fill: currentColor;
  }

  li {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;

    &.error {
      color: var(--error-color);
    }

    &.warning {
      color: var(--warning-color);
    }
  }

  a:hover {
    .text {
      text-decoration: underline;
    }
  }
}
