@import "variables.less";


html, body {
  margin: 0;
  padding: 0;
}

body {
  padding-top: 34px;
  color: @textColor;
  font-size: @defaultFontSize;
  line-height: @defaultLineHeight;
  -webkit-user-select: none;
  overflow-y: scroll;

  // if message is displayed
  &[data-message] {

    &::before {
      position: absolute;
      text-align: center;
      top: 50%;
      width: 100%;
      color: @infoColor;
      content: attr(data-message);
    }

    #meta {
      display: none;
    }
  }
}

mark {
  background-color: fade(@markColor, 70%);
}

a {
  text-decoration: inherit;
  color: inherit;
}

#filters {
  @inputPadding: 2px;
  @inputHeight: 24px;
  @filterIconSize: 16px;
  @clearButtonSize: @inputHeight - @inputPadding * 2;

  display: flex;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  padding: 4px 5px;
  background-color: #ffffff;
  box-sizing: border-box;
  box-shadow: 0 0 5px fade(#000000, 50%);
  z-index: 100;

  .search {
    position: relative;

    svg {
      position: absolute;
      left: @inputPadding;
      top: ~ 'calc(@{inputHeight} / 2 - @{filterIconSize} / 2)';
      width: @filterIconSize;
      height: @filterIconSize;
      fill: @controlColor;
    }

    input[type="text"] {
      padding:
          @inputPadding
          @clearButtonSize + @inputPadding
          @inputPadding
          @filterIconSize + @inputPadding * 2
      ;
      min-width: 252px;
      width: ~'calc(15% - 6px)';
      height: @inputHeight;
      font-size: @defaultFontSize;
      line-height: 16px;
      vertical-align: middle;
      outline: none;
      border: none;
      border-bottom: 1px solid @componentBorderColor;
      box-sizing: border-box;

      &:valid {
        & ~ svg {
          fill: @controlActiveColor;
          filter: drop-shadow(0 0 2px rgba(0,112,255, 0.3));
        }
      }

      &:invalid {
        & ~ button[name="clearFilter"] {
          display: none;
        }
      }
    }

    button[name="clearFilter"] {
      position: absolute;
      top: @inputPadding;
      right: @inputPadding;
      padding: 4px; // scale down icon
      width: @clearButtonSize;
      height: @clearButtonSize;
      background: none;
      border: none;
      box-sizing: border-box;
      cursor: pointer;
      outline: none;

      img {
        display: block;
        width: 100%;
        height: 100%;
      }
    }
  }

  .actions {
    position: relative;
    margin-left: auto;
    padding: 0 0 0 10px;

    &::before {
      content: '';
      position: absolute;
      top: 2px;
      left: 5px;
      bottom: 2px;
      border-left: 1px solid @componentBorderColor;
    }
  }

  .flag {
    display: inline-flex;
    margin-left: 2px;
    padding: 0 6px;
    height: @inputHeight;
    color: @controlColor;
    fill: @controlColor;
    line-height: 16px;
    white-space: nowrap;
    cursor: pointer;
    box-sizing: border-box;

    &:first-of-type {
      margin-left: 4px; // more distance to input
    }

    input {
      display: none;

      &:not(:checked) ~ svg {
        .checked {
          fill: none;
        }
      }

      &:checked {
        & ~ svg {
          fill: @controlActiveColor;
          filter: drop-shadow(0 0 2px rgba(0,112,255, 0.3));

          .unchecked {
            fill: none;
          }
        }

        & ~ span {
          color: @controlActiveColor;
          text-shadow: 0 0 2px rgba(0,112,255, 0.3);
        }
      }

    }

    svg {
      margin-right: 6px;
      width: 10px;
      height: 10px;
      padding: 7px 0;
    }

    span {
      padding: 3px 0;
    }

    &:hover {
      svg {
        fill: @controlHoverColor;
      }

      span {
        color: @controlHoverColor;
      }
    }
  }

  button[name="reload"] {
    padding: 4px;
    width: 24px;
    height: 24px;
    background: none;
    border: none;
    cursor: pointer;
    outline: none;

    svg {
      height: 16px;
      width: 16px;
      vertical-align: -4px;
      fill: @controlColor;
    }

    &:hover svg {
      fill: @controlHoverColor;
    }

    &._animate {
      transition: transform 1s;
      transform: rotate(360deg);
    }
  }

}


#notifications {
  margin: 0 0 0 auto;
  list-style: none;

  svg {
    height: 16px;
    width: 16px;
    vertical-align: top;
    fill: currentColor;
  }

  .warning {
    color: @warningColor;
  }

  a:hover {
    .text {
      text-decoration: underline;
    }
  }

}


#meta {
  width: 100%;

  tr {
    &:nth-child(odd) {
      td {
        background-color: @oddItemBackgroundColor;
      }

      &._changed td {
        animation: 1s oddItemChanged;
      }
    }

    &:nth-child(even) {
      td {
        background-color: @evenItemBackgroundColor;
      }

      &._changed td {
        animation: 1s evenItemChanged;
      }
    }

    &:hover {
      td, th {
        background-color: @hoverItemBackgroundColor;
      }
    }

    &.warning {
      td {
        background-color: @warningItemBackgroundColor;
      }

      th {
        background-color: darken(@warningItemBackgroundColor, 3%);
      }

      &:hover {
        td, th {
          background-color: darken(@warningItemBackgroundColor, 5%);
        }
      }
    }

    &.break-value {
      td > .value {
        word-break: break-all;
      }
    }
  }

  th,
  td {
    position: relative;
    padding: 2px 10px;
    text-align: left;
    border-bottom: 1px solid transparent;
  }

  th {
    padding-right: 24px; /* space for actions */
    background-color: #eeeeee;
    width: 15%;
    min-width: 220px; /* see input width */
    white-space: nowrap;
    word-break: keep-all;
  }

  td {
    background-color: #ffffff;
  }

  a {
    text-decoration: none;
    color: @brandColor;

    &:hover {
      text-decoration: underline;
    }
  }

  .tag {
    display: inline-block;
    margin: 0 5px 0 -3px;
    padding: 0px 5px 0px;
    width: 30px;
    text-align: center;
    font-weight: normal;
    font-size: 10px;
    line-height: 15px;
    color: #ffffff;
    background-color: #666666;
    border-radius: 3px;
    text-transform: uppercase;

    &.-title {
      background-color: #FF4C4C;
    }

    &.-base {
      background-color: #FF9D4C;
    }

    &.-meta {
      background-color: #1DBB1D;
    }

    &.-link {
      background-color: #3682A3;
    }
  }

  .key,
  .name,
  .value {
    -webkit-user-select: text;
  }

  .value {
    margin-right: 1em;
  }

  .attributes {
    color: #777777;
    font-weight: normal;
  }

  .attribute {
    display: inline-block;
    white-space: nowrap;

    .name {
      color: @infoColor;

      &::after {
        content: ':';
      }
    }
  }

  .actions {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    padding: 1px;
    opacity: 0;

    img {
      margin-top: 1px;
      width: 18px;
      height: 18px;
      opacity: 0.2;
    }

    a:hover img {
      opacity: 0.5;
    }
  }
  tr:hover .actions {
    opacity: 1;
  }
}


@keyframes oddItemChanged {
  0% {
    background-color: @changedItemBackgroundColor;
  }
  100% {
    background-color: @oddItemBackgroundColor;
  }
}

@keyframes evenItemChanged {
  0% {
    background-color: @changedItemBackgroundColor;
  }
  100% {
    background-color: @evenItemBackgroundColor;
  }
}


